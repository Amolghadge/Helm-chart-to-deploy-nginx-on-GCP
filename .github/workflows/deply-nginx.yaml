name: Deploy Nginx to GKE

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggers

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: nginx-cluster
  GKE_ZONE: ${{ secrets.GKE_ZONE || 'us-central1-c' }}
  DEPLOYMENT_NAME: nginx
  HELM_CHART_DIR: ./helm-chart
  NAMESPACE: default

jobs:
  deploy:
    name: Deploy Nginx to GKE
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud SDK with gke-gcloud-auth-plugin
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker
      run: gcloud auth configure-docker --quiet

    - name: Verify GKE cluster exists
      run: |
        echo "Verifying GKE cluster: $GKE_CLUSTER in zone: $GKE_ZONE"
        gcloud container clusters describe $GKE_CLUSTER \
          --zone $GKE_ZONE \
          --project $PROJECT_ID
        
        echo "‚úÖ Cluster verification successful"

    - name: Configure kubectl to use gke-gcloud-auth-plugin
      run: |
        # Update kubeconfig to use the new authentication method
        gcloud container clusters get-credentials $GKE_CLUSTER \
          --zone $GKE_ZONE \
          --project $PROJECT_ID
        
        # Verify the kubeconfig is using the correct auth provider
        kubectl config view | grep -A5 -B5 "gke_"

    - name: Verify cluster connection
      run: |
        echo "=== Testing cluster connection ==="
        kubectl cluster-info
        echo "=== Cluster Nodes ==="
        kubectl get nodes --output=wide
        echo "‚úÖ Cluster connection successful"

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Validate Helm chart
      run: |
        echo "=== Linting Helm chart ==="
        helm lint $HELM_CHART_DIR
        
        echo "=== Template validation ==="
        helm template $DEPLOYMENT_NAME $HELM_CHART_DIR --namespace $NAMESPACE --debug

    - name: Deploy Nginx using Helm
      run: |
        echo "Deploying Nginx Helm chart to GKE cluster..."
        
        helm upgrade --install $DEPLOYMENT_NAME $HELM_CHART_DIR \
          --namespace $NAMESPACE \
          --create-namespace \
          --set replicaCount=2 \
          --set image.repository=nginx \
          --set image.tag="1.25.3" \
          --set image.pullPolicy=IfNotPresent \
          --set service.type=LoadBalancer \
          --set service.port=80 \
          --set service.targetPort=8080 \
          --set resources.requests.cpu=250m \
          --set resources.requests.memory=256Mi \
          --set resources.limits.cpu=500m \
          --set resources.limits.memory=512Mi \
          --wait \
          --timeout 10m \
          --atomic

    - name: Verify deployment
      run: |
        echo "=== Deployment status ==="
        kubectl get deployments -n $NAMESPACE
        
        echo "=== Pods status ==="
        kubectl get pods -n $NAMESPACE -l "app.kubernetes.io/name=nginx" -o wide
        
        echo "=== Services ==="
        kubectl get services -n $NAMESPACE
        
        echo "=== Waiting for pods to be ready ==="
        kubectl wait --for=condition=ready pod -l "app.kubernetes.io/name=nginx" -n $NAMESPACE --timeout=300s
        
        echo "‚úÖ Deployment verification completed"

    - name: Get application endpoints
      run: |
        echo "=== Application Details ==="
        
        # Wait for LoadBalancer IP
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get service $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
          if [ -n "$EXTERNAL_IP" ]; then
            echo "üéâ Nginx is now accessible at: http://$EXTERNAL_IP"
            echo "üåê Health endpoint: http://$EXTERNAL_IP/health"
            echo "üìä Main endpoint: http://$EXTERNAL_IP/"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚è≥ LoadBalancer IP is taking longer than expected to provision..."
            kubectl describe service $DEPLOYMENT_NAME -n $NAMESPACE
          fi
          sleep 10
        done

    - name: Run health checks
      run: |
        echo "Running health checks..."
        
        EXTERNAL_IP=$(kubectl get service $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
        
        if [ -n "$EXTERNAL_IP" ]; then
          echo "Testing Nginx service at http://$EXTERNAL_IP"
          
          # Test with retries
          for i in {1..15}; do
            echo "Health check attempt $i/15..."
            if curl -f -s -m 10 http://$EXTERNAL_IP/health; then
              echo "‚úÖ Health check passed!"
              
              # Test main endpoint
              if curl -f -s -m 10 http://$EXTERNAL_IP/; then
                echo "‚úÖ Main endpoint is accessible"
              else
                echo "‚ö†Ô∏è Main endpoint returned non-200 (might be expected)"
              fi
              break
            else
              if [ $i -eq 15 ]; then
                echo "‚ùå Health check failed after 15 attempts"
                echo "Debugging info:"
                kubectl describe pods -l "app.kubernetes.io/name=nginx" -n $NAMESPACE
                exit 1
              fi
              sleep 10
            fi
          done
        else
          echo "‚ÑπÔ∏è No external IP available for health checks"
          echo "Service status:"
          kubectl describe service $DEPLOYMENT_NAME -n $NAMESPACE
        fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    if: failure() && github.event_name != 'pull_request'
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        install_components: 'gke-gcloud-auth-plugin'

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER \
          --zone $GKE_ZONE \
          --project $PROJECT_ID

    - name: Setup Helm
      uses: azure/setup-helm@v3

    - name: Rollback deployment
      run: |
        echo "=== Checking deployment status ==="
        helm list -n $NAMESPACE || true
        
        if helm status $DEPLOYMENT_NAME -n $NAMESPACE 2>/dev/null; then
          echo "üö® Rolling back deployment..."
          helm rollback $DEPLOYMENT_NAME 0 -n $NAMESPACE --wait --timeout 5m
          echo "‚úÖ Rollback completed"
        else
          echo "‚ÑπÔ∏è No deployment found to rollback"
        fi

    - name: Collect debug information
      run: |
        echo "=== Debug Information ==="
        echo "Pods:"
        kubectl get pods -n $NAMESPACE -o wide || true
        echo "Services:"
        kubectl get services -n $NAMESPACE || true
        echo "Events:"
        kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -20 || true
        echo "Pod logs:"
        kubectl logs -l "app.kubernetes.io/name=nginx" -n $NAMESPACE --tail=50 || true
