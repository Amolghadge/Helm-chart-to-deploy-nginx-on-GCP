name: Deploy NGINX to GKE

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'helm-chart/**'
      - '.github/workflows/deploy-nginx.yml'
  workflow_dispatch:
    inputs:
      helm_values_override:
        description: 'Optional: additional --set pairs (comma or yaml style) for helm (e.g. service.type=NodePort,replicaCount=2)'
        required: false
        type: string
      image_tag:
        description: 'Optional: override image tag (e.g. 1.25.3)'
        required: false
        default: ''

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: nginx-cluster
  GKE_ZONE: ${{ secrets.GCP_ZONE }}
  HELM_CHART_PATH: helm-chart
  HELM_RELEASE: nginx-release
  K8S_NAMESPACE: default

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Authenticate to GCP using a service account key stored in GH secret (GCP_SA_KEY)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials "${{ env.GKE_CLUSTER }}" \
            --zone "${{ env.GKE_ZONE }}" \
            --project "${{ env.PROJECT_ID }}"

      - name: Install kubectl (ensures version matches gcloud)
        run: |
          # kubectl installed via gcloud components sometimes; fallback install if missing
          if ! command -v kubectl >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y ca-certificates
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          fi
          kubectl version --client

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Prepare Helm args
        id: helm_args
        run: |
          # Build any dependencies (if present)
          helm dependency build "${HELM_CHART_PATH}" || true

          # Compute optional flags
          HELM_EXTRA=""
          if [ -n "${{ github.event.inputs.helm_values_override }}" ]; then
            # Allow comma-separated or YAML-style --set overrides
            HELM_EXTRA="--set ${GITHUB_EVENT_INPUTS_HELM_VALUES_OVERRIDE}"
          fi

          # prefer explicit input image_tag over chart default when provided
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            HELM_EXTRA="${HELM_EXTRA} --set image.tag=${{ github.event.inputs.image_tag }}"
          fi

          # Export for next step
          echo "HELM_EXTRA=${HELM_EXTRA}" >> "$GITHUB_OUTPUT"

      - name: Helm upgrade --install nginx
        env:
          HELM_EXTRA: ${{ steps.helm_args.outputs.HELM_EXTRA }}
        run: |
          # Use a stable release name; change HELM_RELEASE env if you want a different one
          echo "Running helm upgrade --install with extra args: $HELM_EXTRA"
          helm upgrade --install "${HELM_RELEASE}" "${HELM_CHART_PATH}" \
            --namespace "${K8S_NAMESPACE}" --create-namespace \
            $HELM_EXTRA \
            --wait --timeout 5m
          
      - name: Show rollout status
        run: |
          kubectl rollout status deployment/"${HELM_RELEASE}" -n "${K8S_NAMESPACE}" --timeout=120s || \
            (kubectl describe deployment "${HELM_RELEASE}" -n "${K8S_NAMESPACE}" && kubectl get pods -n "${K8S_NAMESPACE}" -o wide && exit 1)

      - name: Print service and basic info
        run: |
          kubectl get svc -n "${K8S_NAMESPACE}" -o wide
          kubectl get all -n "${K8S_NAMESPACE}" -o wide
