name: Deploy Nginx to GKE

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggers

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: nginx-cluster
  GKE_ZONE: us-central1-c
  DEPLOYMENT_NAME: nginx-deployment
  HELM_CHART_DIR: ./helm-chart
  NAMESPACE: default

jobs:
  setup-and-deploy:
    name: Setup and Deploy to GKE
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure Docker
      run: gcloud auth configure-docker --quiet

    - name: Check if GKE cluster exists
      id: check-cluster
      run: |
        if gcloud container clusters describe $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID > /dev/null 2>&1; then
          echo "cluster_exists=true" >> $GITHUB_OUTPUT
          echo "✅ Cluster $GKE_CLUSTER exists"
        else
          echo "cluster_exists=false" >> $GITHUB_OUTPUT
          echo "❌ Cluster $GKE_CLUSTER does not exist"
        fi

    - name: Create GKE cluster if it doesn't exist
      if: steps.check-cluster.outputs.cluster_exists == 'false'
      run: |
        echo "Creating GKE cluster: $GKE_CLUSTER in zone: $GKE_ZONE"
        
        gcloud container clusters create $GKE_CLUSTER \
          --zone $GKE_ZONE \
          --project $PROJECT_ID \
          --num-nodes 2 \
          --machine-type e2-medium \
          --enable-autoscaling \
          --min-nodes 1 \
          --max-nodes 3 \
          --enable-autorepair \
          --enable-autoupgrade \
          --enable-ip-alias \
          --release-channel regular \
          --preemptible \
          --scopes "https://www.googleapis.com/auth/cloud-platform"
        
        echo "✅ GKE cluster created successfully"

    - name: Get GKE credentials
      run: |
        echo "Getting credentials for cluster: $GKE_CLUSTER"
        gcloud container clusters get-credentials $GKE_CLUSTER \
          --zone $GKE_ZONE \
          --project $PROJECT_ID
        
        # Verify cluster connection
        kubectl cluster-info
        kubectl get nodes

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Verify Helm chart
      run: |
        helm lint $HELM_CHART_DIR
        helm template $DEPLOYMENT_NAME $HELM_CHART_DIR

    - name: Deploy Nginx using Helm
      run: |
        helm upgrade --install $DEPLOYMENT_NAME $HELM_CHART_DIR \
          --namespace $NAMESPACE \
          --create-namespace \
          --set replicaCount=2 \
          --set image.tag="1.25.3" \
          --set service.type=LoadBalancer \
          --set resources.requests.cpu=250m \
          --set resources.requests.memory=256Mi \
          --set resources.limits.cpu=500m \
          --set resources.limits.memory=512Mi \
          --wait \
          --timeout 5m

    - name: Verify deployment
      run: |
        echo "Checking deployment status..."
        kubectl get deployments -n $NAMESPACE
        kubectl get pods -n $NAMESPACE -l "app.kubernetes.io/name=nginx"
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l "app.kubernetes.io/name=nginx" -n $NAMESPACE --timeout=180s

    - name: Get service information
      run: |
        echo "Service details:"
        kubectl get service $DEPLOYMENT_NAME -n $NAMESPACE
        
        # Get external IP if available
        EXTERNAL_IP=$(kubectl get service $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
        if [ -n "$EXTERNAL_IP" ]; then
          echo "🎉 Nginx is accessible at: http://$EXTERNAL_IP"
          echo "🌐 Health check: http://$EXTERNAL_IP/health"
        else
          echo "⏳ LoadBalancer IP is being provisioned..."
          kubectl describe service $DEPLOYMENT_NAME -n $NAMESPACE
        fi

    - name: Run smoke test
      run: |
        # Wait for LoadBalancer to get IP
        echo "Waiting for LoadBalancer IP assignment..."
        sleep 60
        
        EXTERNAL_IP=$(kubectl get service $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        if [ -n "$EXTERNAL_IP" ]; then
          echo "Testing Nginx at http://$EXTERNAL_IP"
          
          # Test with retries
          for i in {1..10}; do
            if curl -f -s http://$EXTERNAL_IP/health > /dev/null; then
              echo "✅ Smoke test passed!"
              break
            else
              echo "Attempt $i/10: Service not ready yet..."
              sleep 15
            fi
          done
          
          # Final test
          curl -f http://$EXTERNAL_IP/health || echo "❌ Smoke test failed"
        else
          echo "❓ Could not retrieve external IP for smoke test"
        fi

  cleanup-on-failure:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    if: failure() && github.event_name != 'pull_request'
    needs: setup-and-deploy
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER \
          --zone $GKE_ZONE \
          --project $PROJECT_ID

    - name: Check deployment status
      run: |
        helm status $DEPLOYMENT_NAME --namespace $NAMESPACE || true

    - name: Rollback if needed
      run: |
        if helm history $DEPLOYMENT_NAME --namespace $NAMESPACE 2>/dev/null | grep -q "FAILED"; then
          echo "Rolling back deployment..."
          helm rollback $DEPLOYMENT_NAME 0 --namespace $NAMESPACE
        else
          echo "No rollback needed"
        fi

    - name: Debug information
      run: |
        echo "=== Pods ==="
        kubectl get pods -n $NAMESPACE || true
        echo "=== Services ==="
        kubectl get services -n $NAMESPACE || true
        echo "=== Events ==="
        kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' || true
